diff -c3 -r ./lzhamcomp/lzham_threading.h /home/m/workspace/fsbench/src/codecs/lzham/lzhamcomp/lzham_threading.h
*** ./lzhamcomp/lzham_threading.h   2012-12-17 20:35:15.080088516 +0100
--- /home/m/workspace/fsbench/src/codecs/lzham/lzhamcomp/lzham_threading.h  2012-11-13 21:14:20.000000000 +0100
***************
*** 1,12 ****
! // File: lzham_threading.h
! // See Copyright Notice and license at the end of include/lzham.h
! 
! #if LZHAM_USE_WIN32_API
!    #include "lzham_win32_threading.h"
! #elif LZHAM_USE_PTHREADS_API
!    #include "lzham_pthreads_threading.h"
! #else
!    #include "lzham_null_threading.h"
! #endif
! 
! 
--- 1,6 ----
! // File: lzham_threading.h
! // See Copyright Notice and license at the end of include/lzham.h
! 
! #include "lzham_null_threading.h"
! 
! 
diff -c3 -r ./lzhamdecomp/lzham_core.h /home/m/workspace/fsbench/src/codecs/lzham/lzhamdecomp/lzham_core.h
*** ./lzhamdecomp/lzham_core.h  2012-12-17 20:35:15.364095960 +0100
--- /home/m/workspace/fsbench/src/codecs/lzham/lzhamdecomp/lzham_core.h 2012-12-17 19:01:10.000000000 +0100
***************
*** 136,142 ****
  #include <stdlib.h>
  #include <stdio.h>
  #include <math.h>
- #include <malloc.h>
  #include <stdarg.h>
  #include <memory.h>
  #include <limits.h>
--- 136,141 ----
diff -c3 -r ./lzhamdecomp/lzham_mem.cpp /home/m/workspace/fsbench/src/codecs/lzham/lzhamdecomp/lzham_mem.cpp
*** ./lzhamdecomp/lzham_mem.cpp 2012-12-17 20:35:15.236090140 +0100
--- /home/m/workspace/fsbench/src/codecs/lzham/lzhamdecomp/lzham_mem.cpp    2012-12-17 20:42:43.124376176 +0100
***************
*** 1,7 ****
  // File: lzham_mem.cpp
  // See Copyright Notice and license at the end of include/lzham.h
  #include "lzham_core.h"
! #include <malloc.h>
  
  using namespace lzham;
  
--- 1,9 ----
  // File: lzham_mem.cpp
  // See Copyright Notice and license at the end of include/lzham.h
  #include "lzham_core.h"
! #ifdef __FreeBSD__
!    #include <malloc_np.h>
! #endif
  
  using namespace lzham;
  
diff -c3 -r ./lzhamdecomp/lzham_platform.h /home/m/workspace/fsbench/src/codecs/lzham/lzhamdecomp/lzham_platform.h
*** ./lzhamdecomp/lzham_platform.h  2012-12-17 20:35:15.363095708 +0100
--- /home/m/workspace/fsbench/src/codecs/lzham/lzhamdecomp/lzham_platform.h 2012-12-17 20:18:12.000000000 +0100
***************
*** 14,19 ****
--- 14,20 ----
     #define LZHAM_BREAKPOINT DebuggerBreak();
     #define LZHAM_BUILTIN_EXPECT(c, v) c
  #elif defined(__GNUC__)
+    #define GCC_VERSION (__GNUC__ * 100 + __GNUC_MINOR__)
     #define LZHAM_BREAKPOINT asm("int $3");
     #define LZHAM_BUILTIN_EXPECT(c, v) __builtin_expect(c, v)
  #else
***************
*** 89,96 ****
     #else
        #if defined(LZHAM_USE_MSVC_INTRINSICS)
           #define LZHAM_READ_BIG_ENDIAN_UINT32(p) _byteswap_ulong(*reinterpret_cast<const uint32*>(p))
!       #elif defined(__GNUC__)
           #define LZHAM_READ_BIG_ENDIAN_UINT32(p) __builtin_bswap32(*reinterpret_cast<const uint32*>(p))
        #else
           #define LZHAM_READ_BIG_ENDIAN_UINT32(p) utils::swap32(*reinterpret_cast<const uint32*>(p))
        #endif
--- 90,100 ----
     #else
        #if defined(LZHAM_USE_MSVC_INTRINSICS)
           #define LZHAM_READ_BIG_ENDIAN_UINT32(p) _byteswap_ulong(*reinterpret_cast<const uint32*>(p))
!       #elif defined(__GNUC__) && (GCC_VERSION >= 430)
           #define LZHAM_READ_BIG_ENDIAN_UINT32(p) __builtin_bswap32(*reinterpret_cast<const uint32*>(p))
+       #elif defined(__FreeBSD__)
+          #include <sys/endian.h>
+          #define LZHAM_READ_BIG_ENDIAN_UINT32(p) bswap32(*reinterpret_cast<const uint32*>(p))
        #else
           #define LZHAM_READ_BIG_ENDIAN_UINT32(p) utils::swap32(*reinterpret_cast<const uint32*>(p))
        #endif
diff -c3 -r ./lzhamdecomp/lzham_traits.h /home/m/workspace/fsbench/src/codecs/lzham/lzhamdecomp/lzham_traits.h
*** ./lzhamdecomp/lzham_traits.h    2012-12-17 20:35:15.359087857 +0100
--- /home/m/workspace/fsbench/src/codecs/lzham/lzhamdecomp/lzham_traits.h   2012-12-17 20:46:34.421088815 +0100
***************
*** 66,81 ****
  
     // Defines type Q as bitwise copyable.
  #define LZHAM_DEFINE_BITWISE_COPYABLE(Q) template<> struct bitwise_copyable<Q> { enum { cFlag = true }; };
! 
! #define LZHAM_IS_POD(T) __is_pod(T)
! 
  #define LZHAM_IS_SCALAR_TYPE(T) (scalar_type<T>::cFlag)
  
  #define LZHAM_IS_BITWISE_COPYABLE(T) ((scalar_type<T>::cFlag) || (bitwise_copyable<T>::cFlag) || LZHAM_IS_POD(T))
  
  #define LZHAM_IS_BITWISE_MOVABLE(T) (LZHAM_IS_BITWISE_COPYABLE(T) || (bitwise_movable<T>::cFlag))
  
! #define LZHAM_HAS_DESTRUCTOR(T) ((!scalar_type<T>::cFlag) && (!__is_pod(T)))
  
     // From yasli_traits.h:
     // Credit goes to Boost;
--- 66,87 ----
  
     // Defines type Q as bitwise copyable.
  #define LZHAM_DEFINE_BITWISE_COPYABLE(Q) template<> struct bitwise_copyable<Q> { enum { cFlag = true }; };
! #if __cplusplus >= 201103L // C++ 2011
!    #include <type_traits>
!    #define LZHAM_IS_POD(T) (std::is_pod<T>) // untested!!!
! #elif defined (__FreeBSD__)
!    // This definition is not correct, but the way it's used it's going to cause lower performance. At least it works though...
!    #define LZHAM_IS_POD(T) 0
! #else
!    #define LZHAM_IS_POD(T) __is_pod(T)
! #endif
  #define LZHAM_IS_SCALAR_TYPE(T) (scalar_type<T>::cFlag)
  
  #define LZHAM_IS_BITWISE_COPYABLE(T) ((scalar_type<T>::cFlag) || (bitwise_copyable<T>::cFlag) || LZHAM_IS_POD(T))
  
  #define LZHAM_IS_BITWISE_MOVABLE(T) (LZHAM_IS_BITWISE_COPYABLE(T) || (bitwise_movable<T>::cFlag))
  
! #define LZHAM_HAS_DESTRUCTOR(T) ((!scalar_type<T>::cFlag) && (!LZHAM_IS_POD(T)))
  
     // From yasli_traits.h:
     // Credit goes to Boost;
diff -c3 -r ./lzhamdecomp/lzham_types.h /home/m/workspace/fsbench/src/codecs/lzham/lzhamdecomp/lzham_types.h
*** ./lzhamdecomp/lzham_types.h 2012-12-17 20:35:15.233087918 +0100
--- /home/m/workspace/fsbench/src/codecs/lzham/lzhamdecomp/lzham_types.h    2012-12-17 18:55:33.000000000 +0100
***************
*** 40,48 ****
     const int64 INT64_MAX = (int64)0x7FFFFFFFFFFFFFFFULL; //9223372036854775807i64;
  
  #if LZHAM_64BIT_POINTERS
!    typedef unsigned __int64 uint_ptr;
!    typedef unsigned __int64 uint32_ptr;
!    typedef signed __int64   signed_size_t;
     typedef uint64 ptr_bits_t;
     const ptr_bits_t PTR_BITS_XOR = 0xDB0DD4415C87DCF7ULL;
  #else
--- 40,48 ----
     const int64 INT64_MAX = (int64)0x7FFFFFFFFFFFFFFFULL; //9223372036854775807i64;
  
  #if LZHAM_64BIT_POINTERS
!    typedef uint64 uint_ptr;
!    typedef uint64 uint32_ptr;
!    typedef int64  signed_size_t;
     typedef uint64 ptr_bits_t;
     const ptr_bits_t PTR_BITS_XOR = 0xDB0DD4415C87DCF7ULL;
  #else
diff -c3 -r ./lzhamdecomp/lzham_vector.cpp /home/m/workspace/fsbench/src/codecs/lzham/lzhamdecomp/lzham_vector.cpp
*** ./lzhamdecomp/lzham_vector.cpp  2012-12-17 20:35:15.242095072 +0100
--- /home/m/workspace/fsbench/src/codecs/lzham/lzhamdecomp/lzham_vector.cpp 2012-12-17 19:20:05.000000000 +0100
***************
*** 21,28 ****
           return true;
  
        size_t new_capacity = min_new_capacity;
!       if ((grow_hint) && (!math::is_power_of_2(new_capacity)))
!          new_capacity = math::next_pow2(new_capacity);
  
        LZHAM_ASSERT(new_capacity && (new_capacity > m_capacity));
  
--- 21,28 ----
           return true;
  
        size_t new_capacity = min_new_capacity;
!       if ((grow_hint) && (!math::is_power_of_2((uint64)new_capacity)))
!          new_capacity = math::next_pow2((uint64)new_capacity);
  
        LZHAM_ASSERT(new_capacity && (new_capacity > m_capacity));
  
